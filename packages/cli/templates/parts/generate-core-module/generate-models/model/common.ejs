<?php

use Illuminate\Database\Eloquent\Model;
<% if (softDelete) { %>use Illuminate\Database\Eloquent\SoftDeletes;<% } %>
<% if (events.beforeSave.slugify) { %>use Illuminate\Support\Str;<% } %>

class <%- modelName %> extends Model
{
  <% if (softDelete) { %>
    use SoftDeletes;
  <% } %>

  protected $table = '<%- tableName %>';
  protected $modelIcon = '<%- icon %>';
  public $timestamps = <%- timestamp ? 'true' : 'false' %>;
  protected $hasSoftDeletes = <%- softDelete ? 'true' : 'false' %>;
  protected $ignoreSeeding = <%- ignoreSeeding ? 'true' : 'false' %>;
  protected $adminSettings = [
    "layout" => "<%- admin.layout %>"
  ];
  
  <% if (columnCasts.length) { %>
    protected $casts = [
      <% columnCasts.forEach(([columnKey, castTo]) => { %>
        '<%- columnKey %>' => '<%- castTo %>',
      <%  });%> 
    ];
  <% } %>

  <% if (events.shouldInclude()) { %>
    /**
    * Takes care of events
    */
    public static function boot()
    {
      parent::boot();

      <% if (events.afterCreated.shouldInclude()) { %>
        static::created(function ($entry) {
          <% if (events.afterCreated.ordering) { %>
            $entry->order = $entry->id;
            $entry->save();
          <% } %>
        });
      <% } %>

      <% if (events.beforeSave.shouldInclude()) { %>
        static::saving(function ($entry) {
          <% if (events.beforeSave.slugify) { %>
            // Take care of slugs
            foreach (
              array_filter(self::$tableColumns, function ($col) {
                return $col['type'] === 'slug';
              })
              as $colKey => $col
            ) {
              if ($entry->{$col['of']}) {
                $entry->{$colKey} = Str::slug($entry->{$col['of']});
              }
            }
          <% } %>
        });
      <% } %>
    }
  <% } %>

  <% if (draftable) { %>
    public function scopeOnlyPublished($query)
    {
        return $query->where('is_published', 1);
    }
  <% } %>

  <% if (virtuals.length) { %>
    <% const virtualKeys = virtuals.map(({name}) => name).join("', '"); %>
    protected $appends = ['<%- virtualKeys %>'];

    <% virtuals.forEach(({ accessKey, content }) => { %>
      public function get<%- accessKey %>Attribute() {
        <%- content %>
      }
    <%  }) %> 
  <% } %>

  <%
    const fillableKeys =
      Object.keys(columns).join("', '");
  %>
  protected $fillable = [
    '<%- fillableKeys %>'
  ];

  <% const relationshipsToFill = relationships.filter(([_, {fill}]) => fill); %>
  <% if (relationshipsToFill.length) { %>
    protected $with = [
      '<%- relationshipsToFill.map(([columnKey]) => columnKey).join("','")  %>'
    ];
  <% } %>

  <% relationships.forEach(([columnKey, {type, target, foreignKey}]) => { %>
    public function <%- columnKey %>()
    {
        return $this-><% if (type === "oneToOne") { %>belongsTo<% } else { %>belongsToMany<% } %>(<%- target %>, '<%- columnKey %>', '<%- foreignKey %>');
    }
  <%  }) %> 

  <%
    const hiddenKeys =
      Object.keys(columns)
        .filter((columnKey) => columns[columnKey].hide)
        .join("', '");
  %>
  <% if (hiddenKeys.length) { %>
  protected $hidden = [
    '<%- hiddenKeys %>'
  ];
  <% } %>

  protected static $tableColumns = [
    <% 
      Object.keys(formattedColumns).forEach(columnKey => { 
      const formattedColumnSettings = formattedColumns[columnKey];
    %>
      '<%- columnKey %>' => [
          <%- formattedColumnSettings.join(', ') %>
        ],
    <% }) %>
  ];

  public function getSummary () {
      return (object)[
        "columns" => self::$tableColumns,
        "tableName" => $this->table,
        "icon" => $this->modelIcon,
        "ignoreSeeding" => $this->ignoreSeeding,
        "hasTimestamps" => $this->timestamps,
        "hasSoftDelete" => $this->hasSoftDeletes,
        "hasOrdering" => <% if (sorting) { %> true <% } else { %> false <% } %>,
        "isDraftable" => <% if (draftable) { %> true <% } else { %> false <% } %>,
        "isSharable" => <% if (sharable) { %> true <% } else { %> false <% } %>,
        "ownable" => <% if (ownable) { %> true <% } else { %> false <% } %>,
        "admin" => $this->adminSettings,
      ];
  }
}