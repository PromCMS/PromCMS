<?php

<% 

function valueToPHPValue (value) {
  const typeOfValue = typeof value;

  if (typeOfValue === 'number' || typeOfValue === 'boolean') {
    return `${String(value)}`;
  }

  if (typeOfValue === 'object') {
    if (Array.isArray(value)) {
      return `[${value.map(valueToPHPValue).join(', ')}]`;
    } else if (!!value && value.constructor === Object) {
      let finalPHPArray = '['; 
        
      for (const [itemKey, itemValue] of Object.entries(value)) {
        finalPHPArray += `"${itemKey}" => ${valueToPHPValue(itemValue)},`;
      }

      finalPHPArray += ']';

      return finalPHPArray;
    }
  }

  return `"${String(value)}"`;
}

%>

use PromCMS\Core\Database\Model;
use PromCMS\Core\Database\SingletonModel;
use PromCMS\Core\Database\ModelResult;
<% if (events.beforeSave.slugify) { %>use Illuminate\Support\Str;<% } %>

<%# TODO: user soft deletes %> 
class <%- modelName %> extends <%- isSingleton ? "SingletonModel" : "Model" %>
{
  <% if (isSingleton) { %>
  protected string  $name           = <%- valueToPHPValue(name) %>;
  <% } else { %>
  protected string  $tableName      = <%- valueToPHPValue(tableName) %>;
  protected bool    $softDelete     = <%- valueToPHPValue(typeof softDelete !== 'undefined' && softDelete) %>;
  <% } %>
  protected bool    $timestamps     = <%- valueToPHPValue(timestamp) %>;
  protected bool    $translations   = <%- valueToPHPValue(intl) %>;
  protected static bool    $enabled        = <%- valueToPHPValue(enabled) %>;
  protected static array   $adminSettings  = <%- valueToPHPValue(admin) %>;

  <%# Column casts %> 
  <% if (columnCasts.length) { %>
  public static array $casts = [
    <% columnCasts.forEach(([columnKey, castTo]) => { %>
      '<%- columnKey %>' => '<%- castTo %>',
    <%  });%> 
  ];
  <% } %>

  <%# Table columns info %> 
  public static array $tableColumns = [
    <% 
      for (const [columnKey, formattedColumnConfig] of formattedColumns) { 
    %>
      '<%- columnKey %>' => [
        <%- formattedColumnConfig.join(', ') %>
      ],
    <% } %>
  ];
  
  <%# Custom model info not tied to PromCMS\Core\Database\Model perse %> 
  static bool $ignoreSeeding = <%- valueToPHPValue(ignoreSeeding) %>;
  <% if (typeof title !== "undefined") { %>
    static string $title = '<%- title %>';
  <% } %>
  static string $modelIcon = '<%- icon %>';

  <%# Listeners #%> 
  <% if (events.shouldInclude()) { %>
      <%# after created #%>
      <% if (events.afterCreated.shouldInclude()) { %>
        public static function afterCreate(ModelResult $entry): ModelResult {
          <%# Copy ids when ordering #%>
          <% if (events.afterCreated.ordering) { %>
            $entry->update(['order' => $entry->id]);

            return $entry;
          <% } %>
        }
      <% } %>

      <%# Before save #%>
      <% if (events.beforeSave.shouldInclude()) { %>
        public static function beforeCreate($entry): array {
          <%# Slugify fields #%>
          <% if (events.beforeSave.slugify) { %>
            foreach (
              array_filter(static::$tableColumns, function ($col) {
                return $col['type'] === 'slug';
              })
              as $colKey => $col
            ) {
              if (isset($entry[$col['of']]) && $entry[$col['of']]) {
                $entry[$colKey] = Str::slug($entry[$col['of']]);
              }
            }
          <% } %>

          return $entry;
        }
      <% } %>
  <% } %>

  <%# Getter of private and all relevant info #%>
  public function getSummary()
  {
    return (object) [
      'isSingleton'     => $this instanceof SingletonModel,
      <% if (isSingleton) { %> 'name'            => $this->getName(), <% } else { %> 'tableName'       => $this->getTableName(), <% } %>
      'icon'            => self::$modelIcon,
      'title'           => isset(self::$title) ? self::$title : null,
      'ignoreSeeding'   => self::$ignoreSeeding,
      'columns'         => static::$tableColumns,
      'hasTimestamps'   => $this->hasTimestamps(),
      'hasSoftDelete'   => $this->hasSoftDelete(),
      'admin'           => self::$adminSettings,
      'enabled'         => self::$enabled,
      'ownable'         => <%- !isSingleton && ownable ? 'true' : 'false' %>,
      'hasOrdering'     => <%- !isSingleton && sorting ? 'true' : 'false' %>,
      'isDraftable'     => <%- !isSingleton && draftable ? 'true' : 'false' %>,
      'isSharable'      => <%- !isSingleton && sharable ? 'true' : 'false' %>,
    ];
  }
}