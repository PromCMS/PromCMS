<?php

use DI\Container;
use Slim\App;

function getDirContents($dir, &$results = [])
{
  $files = scandir($dir);

  foreach ($files as $key => $value) {
    $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
    if (!is_dir($path)) {
      $results[] = $path;
    } elseif ($value != '.' && $value != '..') {
      getDirContents($path, $results);
      $results[] = $path;
    }
  }

  return $results;
}

class Utils
{
  private string $modelsFolderName;
  private string $controllersFolderName;

  public function __construct(Container $container)
  {
    $modulesConfig = $container->get('config')['system']['modules'];

    $this->modelsFolderName = $modulesConfig['modelsFolderName'];
    $this->controllersFolderName = $modulesConfig['controllersFolderName'];
  }

  /**
   * Imports all php scripts for specified folder
   * @return string[] Returns an array of imported paths
   */
  public function autoloadFolder(string $pathToFolder)
  {
    $importedFilePaths = [];
    if (!is_dir($pathToFolder)) {
      return false;
    }

    $filePaths = getDirContents($pathToFolder);
    foreach ($filePaths as $filePath) {
      include_once $filePath;
      $importedFilePaths[] = $filePath;
    }

    return $importedFilePaths;
  }

  /**
   * Autoloads models for specified module root. This is primarily used by modules.
   * @return string[]|false An array of module names or
   */
  public function autoloadModels(string $moduleRoot)
  {
    // Save previously declared classes in memory
    $classes = get_declared_classes();

    // Autoload files and save imported filepaths to an array
    $importedFilepaths = $this->autoloadFolder(
      "$moduleRoot/$this->modelsFolderName",
    );

    if (!$importedFilepaths) {
      return false;
    }

    // Should have all of loaded model names in array
    $diff = array_values(array_diff(get_declared_classes(), $classes));

    return $diff;
  }

  public function autoloadControllers(string $moduleRoot)
  {
    $importedFilepaths = $this->autoloadFolder(
      "$moduleRoot/$this->controllersFolderName",
    );
    if (!$importedFilepaths) {
      return false;
    }

    return array_map(function (string $filePath) {
      $baseName = basename($filePath, '.controller.php');
      return $baseName;
    }, $importedFilepaths);
  }
}

return function (Container $container) {
  $utils = new Utils($container);

  $container->set('utils', $utils);
};
